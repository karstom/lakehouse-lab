#!/bin/bash

# =============================================================================
# Lakehouse Lab - CRON Backup Setup Script
# =============================================================================
# This script helps set up automated backups using CRON
# 
# Usage: ./examples/cron-backup-setup.sh [options]
# 
# Options:
#   --schedule "CRON_EXPRESSION"  Custom cron schedule (default: daily at 2 AM)
#   --backup-dir PATH             Backup directory (default: ./backups)
#   --retention-days N            Days to keep backups (default: 30)
#   --compress                    Enable compression
#   --email EMAIL                 Email for notifications
#   --dry-run                     Show what would be configured
# =============================================================================

set -euo pipefail

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# Default configuration
CRON_SCHEDULE="0 2 * * *"  # Daily at 2 AM
BACKUP_DIR="./backups"
RETENTION_DAYS=30
COMPRESS=false
EMAIL=""
DRY_RUN=false

# Get the absolute path to the Lakehouse Lab installation
LAKEHOUSE_PATH=$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

parse_args() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            --schedule)
                CRON_SCHEDULE="$2"
                shift 2
                ;;
            --backup-dir)
                BACKUP_DIR="$2"
                shift 2
                ;;
            --retention-days)
                RETENTION_DAYS="$2"
                shift 2
                ;;
            --compress)
                COMPRESS=true
                shift
                ;;
            --email)
                EMAIL="$2"
                shift 2
                ;;
            --dry-run)
                DRY_RUN=true
                shift
                ;;
            --help|-h)
                show_help
                exit 0
                ;;
            *)
                echo "Unknown option: $1"
                exit 1
                ;;
        esac
    done
}

show_help() {
    cat << 'EOF'
Lakehouse Lab CRON Backup Setup

This script configures automated backups using CRON scheduler.

Usage: ./examples/cron-backup-setup.sh [options]

Options:
  --schedule "EXPRESSION"   Cron schedule (default: "0 2 * * *" - daily 2 AM)
  --backup-dir PATH         Backup directory (default: ./backups)
  --retention-days N        Days to keep backups (default: 30)
  --compress               Enable backup compression
  --email EMAIL            Email for notifications (requires mailx/sendmail)
  --dry-run               Show configuration without applying
  --help                  Show this help

Cron Schedule Examples:
  "0 2 * * *"             Daily at 2:00 AM
  "0 2 * * 0"             Weekly on Sunday at 2:00 AM
  "0 2 1 * *"             Monthly on 1st day at 2:00 AM
  "0 */6 * * *"           Every 6 hours
  "0 2 * * 1-5"           Weekdays only at 2:00 AM

Examples:
  ./examples/cron-backup-setup.sh
  ./examples/cron-backup-setup.sh --schedule "0 1 * * 0" --compress
  ./examples/cron-backup-setup.sh --email admin@company.com --retention-days 14
EOF
}

check_prerequisites() {
    log_info "Checking prerequisites..."
    
    # Check if we're in the right directory
    if [[ ! -f "$LAKEHOUSE_PATH/docker-compose.yml" ]]; then
        echo -e "${RED}‚ùå Please run this script from the Lakehouse Lab directory${NC}"
        exit 1
    fi
    
    # Check if backup script exists
    if [[ ! -f "$LAKEHOUSE_PATH/scripts/backup-lakehouse.sh" ]]; then
        echo -e "${RED}‚ùå Backup script not found: $LAKEHOUSE_PATH/scripts/backup-lakehouse.sh${NC}"
        exit 1
    fi
    
    # Check crontab availability
    if ! command -v crontab &> /dev/null; then
        echo -e "${RED}‚ùå crontab command not found. Please install cron.${NC}"
        exit 1
    fi
    
    log_success "Prerequisites check passed"
}

generate_backup_command() {
    local cmd="cd $LAKEHOUSE_PATH && ./scripts/backup-lakehouse.sh"
    cmd+=" --output-dir $BACKUP_DIR"
    cmd+=" --retention-days $RETENTION_DAYS"
    
    if [[ $COMPRESS == true ]]; then
        cmd+=" --compress"
    fi
    
    cmd+=" --quiet"  # Reduce output for cron
    
    echo "$cmd"
}

generate_wrapper_script() {
    local wrapper_script="$LAKEHOUSE_PATH/scripts/backup-wrapper.sh"
    local backup_cmd=$(generate_backup_command)
    
    cat > "$wrapper_script" << EOF
#!/bin/bash

# Lakehouse Lab Backup Wrapper for CRON
# Generated by cron-backup-setup.sh on $(date)

set -euo pipefail

# Logging
LOG_FILE="$BACKUP_DIR/backup-cron.log"
mkdir -p "$BACKUP_DIR"

# Function to log with timestamp
log_with_timestamp() {
    echo "\$(date '+%Y-%m-%d %H:%M:%S') \$1" >> "\$LOG_FILE"
}

# Redirect all output to log file
exec 1> >(while IFS= read -r line; do log_with_timestamp "INFO: \$line"; done)
exec 2> >(while IFS= read -r line; do log_with_timestamp "ERROR: \$line"; done)

log_with_timestamp "=== Lakehouse Lab Backup Started ==="

# Run the backup
if $backup_cmd; then
    log_with_timestamp "=== Backup Completed Successfully ==="
    exit_code=0
else
    log_with_timestamp "=== Backup Failed ==="
    exit_code=1
fi

EOF

    # Add email notification if configured
    if [[ -n "$EMAIL" ]]; then
        cat >> "$wrapper_script" << EOF

# Send email notification
if command -v mailx &> /dev/null || command -v sendmail &> /dev/null; then
    if [[ \$exit_code -eq 0 ]]; then
        echo "Lakehouse Lab backup completed successfully on \$(hostname) at \$(date)" | \\
            mailx -s "Lakehouse Backup Success - \$(date +%Y-%m-%d)" "$EMAIL" 2>/dev/null || true
    else
        {
            echo "Lakehouse Lab backup FAILED on \$(hostname) at \$(date)"
            echo ""
            echo "Last 20 lines of backup log:"
            tail -20 "\$LOG_FILE" 2>/dev/null || echo "Could not read log file"
        } | mailx -s "Lakehouse Backup FAILED - \$(date +%Y-%m-%d)" "$EMAIL" 2>/dev/null || true
    fi
else
    log_with_timestamp "WARNING: mailx/sendmail not available, cannot send email notification"
fi

EOF
    fi

    cat >> "$wrapper_script" << EOF
exit \$exit_code
EOF

    chmod +x "$wrapper_script"
    echo "$wrapper_script"
}

setup_cron_job() {
    local wrapper_script=$(generate_wrapper_script)
    
    if [[ $DRY_RUN == true ]]; then
        echo ""
        log_info "DRY RUN - Would create the following cron configuration:"
        echo ""
        echo "Cron Schedule: $CRON_SCHEDULE"
        echo "Command: $CRON_SCHEDULE $wrapper_script"
        echo "Backup Directory: $BACKUP_DIR"
        echo "Retention: $RETENTION_DAYS days"
        echo "Compression: $([ $COMPRESS == true ] && echo "enabled" || echo "disabled")"
        echo "Email: ${EMAIL:-"not configured"}"
        echo ""
        echo "Wrapper script would be created at: $wrapper_script"
        return 0
    fi
    
    # Create backup directory
    mkdir -p "$BACKUP_DIR"
    
    # Get current crontab
    local temp_crontab=$(mktemp)
    crontab -l > "$temp_crontab" 2>/dev/null || echo "# Crontab created by lakehouse-backup-setup" > "$temp_crontab"
    
    # Remove any existing lakehouse backup jobs
    grep -v "lakehouse.*backup\|backup.*lakehouse" "$temp_crontab" > "${temp_crontab}.clean" || cp "$temp_crontab" "${temp_crontab}.clean"
    
    # Add new backup job
    echo "" >> "${temp_crontab}.clean"
    echo "# Lakehouse Lab Automated Backup - Added $(date)" >> "${temp_crontab}.clean"
    echo "$CRON_SCHEDULE $wrapper_script >/dev/null 2>&1" >> "${temp_crontab}.clean"
    
    # Install new crontab
    crontab "${temp_crontab}.clean"
    
    # Clean up temp files
    rm -f "$temp_crontab" "${temp_crontab}.clean"
    
    log_success "Cron job configured successfully"
    echo ""
    log_info "Configuration Summary:"
    echo "  ‚Ä¢ Schedule: $CRON_SCHEDULE"
    echo "  ‚Ä¢ Backup Directory: $BACKUP_DIR"  
    echo "  ‚Ä¢ Retention: $RETENTION_DAYS days"
    echo "  ‚Ä¢ Compression: $([ $COMPRESS == true ] && echo "enabled" || echo "disabled")"
    echo "  ‚Ä¢ Email: ${EMAIL:-"not configured"}"
    echo "  ‚Ä¢ Log File: $BACKUP_DIR/backup-cron.log"
    echo ""
    log_info "Useful Commands:"
    echo "  ‚Ä¢ View crontab: crontab -l"
    echo "  ‚Ä¢ View backup log: tail -f $BACKUP_DIR/backup-cron.log"
    echo "  ‚Ä¢ Manual backup: $wrapper_script"
    echo "  ‚Ä¢ Remove cron job: crontab -e (then delete the lakehouse backup line)"
}

main() {
    parse_args "$@"
    
    echo ""
    echo -e "${BLUE}============================================${NC}"
    echo -e "${BLUE} üïê Lakehouse Lab CRON Backup Setup${NC}"
    echo -e "${BLUE}============================================${NC}"
    echo ""
    
    check_prerequisites
    setup_cron_job
    
    echo ""
    log_success "CRON backup setup completed!"
    
    if [[ $DRY_RUN != true ]]; then
        echo ""
        log_info "Next backup will run according to schedule: $CRON_SCHEDULE"
        log_info "Monitor backup logs at: $BACKUP_DIR/backup-cron.log"
    fi
}

# Run main function
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi