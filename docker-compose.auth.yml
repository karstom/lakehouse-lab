# Lakehouse Lab - Authentication Services Overlay
# This file extends docker-compose.yml with optional authentication services
# Usage: docker compose -f docker-compose.yml -f docker-compose.auth.yml up -d

services:
  # Authentication Service
  auth-service:
    image: lakehouse-auth:${LAKEHOUSE_VERSION:-latest}
    container_name: lakehouse-auth
    restart: unless-stopped
    ports:
      - "9091:8080"
    environment:
      # Core configuration
      - JWT_SECRET=${JWT_SECRET}
      - AUTH_MODE=${AUTH_MODE:-hybrid}
      - DEFAULT_ADMIN_EMAIL=${DEFAULT_ADMIN_EMAIL:-admin@localhost}
      - ADMIN_EMAILS=${ADMIN_EMAILS:-admin@localhost}
      - COMPANY_DOMAIN=${COMPANY_DOMAIN:-}
      
      # OAuth Providers (optional - leave empty to disable)
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID:-}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET:-}
      - MICROSOFT_CLIENT_ID=${MICROSOFT_CLIENT_ID:-}
      - MICROSOFT_CLIENT_SECRET=${MICROSOFT_CLIENT_SECRET:-}
      - MICROSOFT_TENANT_ID=${MICROSOFT_TENANT_ID:-common}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID:-}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET:-}
      
      # Database connection for user storage
      - POSTGRES_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/lakehouse
      - HOST_IP=${HOST_IP:-localhost}
      
    volumes:
      - auth_data:/app/data
      - ./config/auth.yaml:/app/config/auth.yaml:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - lakehouse
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Authentication Proxy
  auth-proxy:
    image: lakehouse-auth-proxy:${LAKEHOUSE_VERSION:-latest}
    container_name: lakehouse-auth-proxy
    restart: unless-stopped
    ports:
      - "9092:8080"
    environment:
      # Service URLs and credentials (passed through from main .env)
      - AUTH_SERVICE_URL=http://auth-service:8080
      - SUPERSET_URL=http://superset:8088
      - SUPERSET_ADMIN_USER=${SUPERSET_ADMIN_USER}
      - SUPERSET_ADMIN_PASSWORD=${SUPERSET_ADMIN_PASSWORD}
      - AIRFLOW_URL=http://airflow-webserver:8080
      - AIRFLOW_ADMIN_USER=${AIRFLOW_ADMIN_USER}
      - AIRFLOW_ADMIN_PASSWORD=${AIRFLOW_ADMIN_PASSWORD}
      - JUPYTER_URL=http://jupyter:8888
      - JUPYTER_TOKEN=${JUPYTER_TOKEN}
      - VIZRO_URL=http://vizro:8050
      - LANCEDB_URL=http://lancedb:8000
      - MINIO_CONSOLE_URL=http://minio:9001
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - PORTAINER_URL=http://portainer:9000
      
      # Configuration
      - JWT_SECRET=${JWT_SECRET}
      - LOG_LEVEL=${AUTH_LOG_LEVEL:-INFO}
      - CORS_ENABLED=${CORS_ENABLED:-true}
      
    volumes:
      - ./config/auth-proxy.yaml:/app/config/proxy.yaml:ro
    depends_on:
      - auth-service
      - superset
      - airflow-webserver
      - jupyter
    networks:
      - lakehouse
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # MCP Server with Authentication
  mcp-server:
    image: lakehouse-mcp:${LAKEHOUSE_VERSION:-latest}
    container_name: lakehouse-mcp
    restart: unless-stopped
    ports:
      - "9090:8000"
    environment:
      # Authentication
      - AUTH_PROXY_URL=http://auth-proxy:8080
      - AUTH_SERVICE_URL=http://auth-service:8080
      - JWT_SECRET=${JWT_SECRET}
      
      # Database connections
      - POSTGRES_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/lakehouse
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD}
      - LANCEDB_URL=http://lancedb:8000
      - SPARK_MASTER_URL=spark://spark-master:7077
      
      # Configuration
      - MCP_LOG_LEVEL=${MCP_LOG_LEVEL:-INFO}
      - RATE_LIMIT_ENABLED=${MCP_RATE_LIMIT:-true}
      - MAX_QUERY_SIZE=${MCP_MAX_QUERY_SIZE:-100MB}
      
    volumes:
      - ./config/mcp-server.yaml:/app/config/mcp.yaml:ro
      - mcp_logs:/app/logs
    depends_on:
      - auth-proxy
      - postgres
      - minio
      - lancedb
      - spark-master
    networks:
      - lakehouse
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          memory: ${MCP_MEMORY_LIMIT:-2G}
        reservations:
          memory: ${MCP_MEMORY_RESERVATION:-1G}

  # Audit Service (optional)
  audit-service:
    image: lakehouse-audit:${LAKEHOUSE_VERSION:-latest}
    container_name: lakehouse-audit
    restart: unless-stopped
    environment:
      - POSTGRES_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/lakehouse
      - AUTH_SERVICE_URL=http://auth-service:8080
      - LOG_RETENTION_DAYS=${AUDIT_RETENTION_DAYS:-365}
      - ALERT_WEBHOOK_URL=${AUDIT_WEBHOOK_URL:-}
    volumes:
      - audit_logs:/app/logs
      - ./config/audit.yaml:/app/config/audit.yaml:ro
    depends_on:
      - postgres
      - auth-service
    networks:
      - lakehouse
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

# Additional network configuration for auth services
networks:
  lakehouse:
    external: false
volumes:
  auth_data:
    external: true
  mcp_logs:
    external: true
  audit_logs:
    external: true
